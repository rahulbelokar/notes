SELECT
	resource_associated_entity_id,
	request_mode,
	request_status,
	request_session_id
FROM sys.dm_tran_locks
WHERE resource_database_id = DB_ID(‘ThreadPoolWaits’) AND resource_type = ‘OBJECT’
GO


SELECT
	r.command,
	r.sql_handle,
	r.plan_handle,
	r.wait_type,
	r.wait_resource,
	r.wait_time,
	r.session_id,
	r.blocking_session_id
FROM sys.dm_exec_requests r INNER JOIN sys.dm_exec_sessions s ON r.session_id = s.session_id
WHERE s.is_user_process = 1
GO

--SELECT * FROM sys.dm_os_waiting_tasks WHERE wait_type = ‘THREADPOOL’


-– Analyze the head blocker session
SELECT
	login_time,
	[host_name],
	[program_name],
	login_name
FROM sys.dm_exec_sessions
WHERE session_id = 52
GO
 
–- Analyze the head blocker connection
SELECT
	connect_time,
	client_tcp_port,
	most_recent_sql_handle
FROM sys.dm_exec_connections
WHERE session_id = 52
GO

--SELECT FROM sys.dm_exec_sql_text(0x01001A0015BE5D3170CC4483000000000000000000000000

-- reconfigure 'the max worker threads setting' --By default the value of this option is 0, which means SQL Server itself decides how many worker threads are used. The number of the available worker threads depends on the processor architecture (x32, x64)

Resolved:  In our scenario the root cause was an uncommitted transaction, which leaded to a blocking scenario, which leaded to thread starvation

